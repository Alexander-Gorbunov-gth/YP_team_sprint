services:
  booking_service:
    build: .
    env_file:
      - .env
    ports:
      - "8050:8050"
    volumes:
      - logs:/app/logs
    depends_on:
      - booking_db
      - rabbitmq

  auth_service:
    build: ../auth
    env_file:
      - ../.auth.env
    depends_on:
      - auth_postgres
      - redis
    volumes:
      - logs:/app/logs
    ports:
      - "8001:8001"

  notifications_service:
    build: ../notifications
    env_file:
      - ../notifications/.env.dev
    depends_on:
      - notification_db
      - rabbitmq
    volumes:
      - logs:/app/logs
    ports:
      - "8060:8060"

  notification_db:
    image: postgres:17.4-bookworm
    container_name: notification_db
    ports:
      - "5433:5432"
    volumes:
      - notification_pgdata:/var/lib/postgresql/data/
    env_file:
      - ../notifications/.env.dev

  auth_postgres:
    image: postgres:14
    container_name: auth_postgres
    ports:
      - "5434:5432"
    volumes:
      - pg_auth:/var/lib/postgresql/data/
    env_file:
      - ../.auth.env

  booking_db:
    image: postgres:14
    container_name: booking_db
    restart: always
    volumes:
      - pg_booking:/var/lib/postgresql/data/
    env_file:
      - .env
    ports:
      - "5435:5432"

  rabbitmq:
    build:
      context: ../notifications/rabbitmq
      dockerfile: Dockerfile
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - ../notifications/.env.dev
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    ports:
      - 6379:6379

volumes:
  pg_auth:
  logs:
  notification_pgdata:
  rabbitmq_data:
  pg_booking:
