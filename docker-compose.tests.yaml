services:
  # nginx:
  #   build:
  #     context: ./nginx
  #     dockerfile: Dockerfile
  #   container_name: nginx_movies
  #   restart: always
  #   volumes:
  #     - static_volume:/code/static:ro
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     - admin

  # admin:
  #   build:
  #     context: .
  #     dockerfile: movies_admin/Dockerfile
  #   container_name: admin_movies
  #   restart: always
  #   volumes:
  #     - ./movies_admin:/code
  #     - static_volume:/code/static
  #   env_file:
  #     - .env
  #   ports:
  #     - 8000:8000
  #   depends_on:
  #     postgres:
  #       condition: service_healthy

  fast_api_auth:
    build: ./auth
    env_file:
      - .auth.env
    depends_on:
      - auth_postgres 
      - redis
    ports:
      - 8001:8001

  fast_api_ugc:
    build: ./analitycal_service
    env_file:
      - .env
    depends_on:
      - redis
    ports:
      - 8010:8010

  auth_postgres:
    image: postgres:15
    volumes:
      - pg_auth:/var/lib/postgresql/data/
    env_file:
      - .auth.env
    ports:
      - 5432:5432

  content_service:
    build: ./content_service
    env_file:
      - .env
    ports:
      - 8005:8005
    depends_on:
      - postgres
      - redis
      - elasticsearch
  
  redis:
    image: redis:alpine
    ports:
      - 6379:6379

  postgres:
    image: postgres:15
    container_name: postgres_movies
    restart: always
    volumes:
      - content_db:/var/lib/postgresql/data/
      - ./database_dump.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - ./.env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 2s
      timeout: 3s
      retries: 3

  etl_service:
    container_name: etl_service_movies
    build:
      context: .
      dockerfile: etl_service/Dockerfile
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  elasticsearch:
    image: elasticsearch:8.15.3
    container_name: elasticsearch_movies
    logging:
      driver: none
    ports:
      - "9200:9200"
    expose:
      - "9200"
    healthcheck:
      test: curl -s http://elasticsearch:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - logger.level=WARN
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - cluster.routing.allocation.disk.watermark.low=95%
      - cluster.routing.allocation.disk.watermark.high=97%
      - cluster.routing.allocation.disk.watermark.flood_stage=98%

  clickhouse:
    image: clickhouse/clickhouse-server:24.8
    container_name: clickhouse
    env_file:
      - ./.env
    ports:
      - "8123:8123"
    environment:
      CLICKHOUSE_USER: ${CH_USER}
      CLICKHOUSE_PASSWORD: ${CH_PASSWORD}
      CLICKHOUSE_DB: ${CH_DATABASE}
      CLICKHOUSE_SECURE: ${CH_USESSL}

  tests:
    build:
      context: .
      dockerfile: ./tests/Dockerfile
    container_name: tests
    volumes:
      - ./tests:/code/tests
    env_file:
      - .env

volumes:
  content_db:
  static_volume:
  elasticsearch-data:
  pg_auth:
