services:
  gateway:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: theatre-gateway
    restart: always
    volumes:
      - static_volume:/code/static:ro
    ports:
      - "80:80"
    depends_on:
      - api

  api:
    build:
      context: .
      dockerfile: movies_admin/Dockerfile
    container_name: theatre-api
    restart: always
    volumes:
      - ./movies_admin:/code
      - static_volume:/code/static
    env_file:
      - ./.env
    depends_on:
      theatre-db:
        condition: service_healthy

  fast_api:
    build: ./fast_api
    env_file:
      - ./.env
    depends_on:
      - theatre-db
      - redis
      - elastic_search
  
  redis:
    image: redis:alpine

  theatre-db:
    image: postgres:14
    container_name: theatre-db
    restart: always
    volumes:
      - content_db:/var/lib/postgresql/data/
      - ./database_dump.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - ./.env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 10s
      timeout: 30s
      retries: 3

  etl_service:
    build:
      context: .
      dockerfile: etl_service/Dockerfile
    env_file:
      - ./.env
    depends_on:
      theatre-db:
        condition: service_healthy
      elastic_search:
        condition: service_healthy

  elastic_search:
    image: elasticsearch:8.6.2
    ports:
      - "9200:9200"
    expose:
      - "9200"
    healthcheck:
      test: curl -s http://elastic_search:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false


volumes:
  content_db:
  static_volume:
